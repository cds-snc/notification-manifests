apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "api.fullname" . }}
  labels:
    app: {{ include "api.name" . }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  priorityClassName: {{ .Values.priorityClassName }}
  strategy:
    {{ toYaml .Values.updateStrategy | nindent 4 }}
  selector:
    matchLabels:
      app: {{ include "api.name" . }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app: {{ include "api.name" . }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "api.serviceAccountName" . }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 60
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: init-postgres
          image: alpine
          command:
            [
              "sh",
              "-c",
              "until nslookup $POSTGRES_HOST; do echo waiting for postgres; sleep 2; done;",
            ]
          env:
            - name: POSTGRES_HOST
              valueFrom:
                secretKeyRef:
                  name: notify-api
                  key: POSTGRES_HOST   
        - name: migrate-db
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          volumeMounts:
            - name: secrets-store-inline
              mountPath: "/mnt/secrets-store"
              readOnly: true   
          env:
            # Includes common ENV Variables
            {{- range $key, $val := .Values.api }}
            - name: {{ $key }}
              value: {{ $val | quote }}
            {{- end }}
            # Includes secret ENV Variables
            {{- range $key, $val := .Values.apiSecrets }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: notify-api
                  key: {{ $key }}
            {{- end }}
            - name: STATSD_HOST
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          command:
            [
              "sh",
              "-c",
              "flask db upgrade || echo 'ERROR: database migration failed'",
            ]
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            # Includes common ENV Variables
            {{- range $key, $val := .Values.api }}
            - name: {{ $key }}
              value: {{ $val | quote }}
            {{- end }}
            # Includes secret ENV Variables
            {{- range $key, $val := .Values.apiSecrets }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: notify-api
                  key: {{ $key }}
            {{- end }}
            - name: STATSD_HOST
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          {{ if .Values.secretProviderClass.enabled}}    
          volumeMounts:
            - name: secrets-store-inline
              mountPath: "/mnt/secrets-store"
              readOnly: true          
          {{ end }}   
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /_status?simple=true
              port: 6011
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds}}
            periodSeconds: 3
            timeoutSeconds: 1
            successThreshold: 3
            failureThreshold: 10
          livenessProbe:
            httpGet:
              path: "/_status?simple=true"
              port: 6011
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds}}
            periodSeconds: 3
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{ if .Values.secretProviderClass.enabled}}    
      volumes:
        - name: secrets-store-inline
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ include "api.fullname" . }}
      {{ end }}                   
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
