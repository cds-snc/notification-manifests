{{- define "envVars" -}}
- name: ADMIN_BASE_URL
  value: {{ .Values.celeryCommon.adminBaseUrl }}
- name: ALLOW_HTML_SERVICE_IDS
  value: {{ .Values.celeryCommon.allowHtmlServiceIds }}
- name: API_HOST_NAME
  value: {{ .Values.celeryCommon.apiHostName }}
- name: ASSET_UPLOAD_BUCKET_NAME
  value: {{ .Values.celeryCommon.assetUploadBucketName }}
- name: AWS_PINPOINT_REGION
  value: {{ .Values.celeryCommon.awsPinpointRegion }}
- name: AWS_REGION
  value: {{ .Values.celeryCommon.awsRegion }}
- name: BULK_SEND_TEST_SERVICE_ID
  value: {{ .Values.celeryCommon.bulkSendTestServiceId }}
- name: CSV_UPLOAD_BUCKET_NAME
  value: {{ .Values.celeryCommon.csvUploadBucketName }}
- name: DOCUMENT_DOWNLOAD_API_HOST
  value: {{ .Values.celeryCommon.documentDownloadApiHost }}
- name: FIDO2_DOMAIN
  value: {{ .Values.celeryCommon.fido2Domain }}
- name: HC_EN_SERVICE_ID
  value: {{ .Values.celeryCommon.hcEnServiceId }}
- name: HC_FR_SERVICE_ID
  value: {{ .Values.celeryCommon.hcFrServiceId }}
- name: NOTIFY_EMAIL_DOMAIN
  value: {{ .Values.celeryCommon.notifyEmailDomain }}
- name: NOTIFY_ENVIRONMENT
  value: {{ .Values.celeryCommon.notifyEnvironment }}
- name: NOTIFICATION_QUEUE_PREFIX
  value: {{ .Values.celeryCommon.notificationQueuePrefix }}
- name: REDIS_ENABLED
  value: {{ .Values.celeryCommon.redisEnabled }}
- name: AWS_US_TOLL_FREE_NUMBER
  value: {{ .Values.celeryCommon.awsUsTollFreeNumber }}
- name: SENTRY_URL
  value: {{ .Values.celeryCommon.sentryUrl }}
- name: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED
  value: {{ .Values.celeryCommon.newRelicDistributedTracingEnabled }}
- name: NEW_RELIC_MONITOR_MODE
  value: {{ .Values.celeryCommon.newRelicMonitorMode }}
- name: AWS_XRAY_CONTEXT_MISSING
  value: {{ .Values.celeryCommon.awsXrayContextMissing }}
- name: AWS_XRAY_DAEMON_ADDRESS
  value: {{ .Values.celeryCommon.awsXrayDaemonAddress }}
- name: AWS_XRAY_SDK_ENABLED
  value: {{ .Values.celeryCommon.awsXraySdkEnabled }}
- name: NEW_RELIC_MONITOR_MODE
  value: {{ .Values.celeryCommon.newRelicMonitorMode }}
- name: ASSET_DOMAIN
  value: {{ .Values.celeryCommon.assetDomain }}
- name: BATCH_INSERTION_CHUNK_SIZE
  value: {{ .Values.celeryCommon.batchInsertionChunkSize }}
- name: CELERY_CONCURRENCY
  value: {{ .Values.celeryCommon.celeryConcurrency }}
- name: FF_CLOUDWATCH_METRICS_ENABLED
  value: {{ .Values.celeryCommon.ffCloudwatchMetricsEnabled }}
- name: FF_ANNUAL_LIMIT
  value: {{ .Values.celeryCommon.ffAnnualLimit }}
{{- end -}}
{{- define "envSecrets" -}}
- name: ADMIN_CLIENT_SECRET
  valueFrom:
    secretKeyRef:
      name: notify-celery-main
      key: ADMIN_CLIENT_SECRET
- name: DANGEROUS_SALT
  valueFrom:
    secretKeyRef:
      name: notify-celery-main
      key: DANGEROUS_SALT
- name: SECRET_KEY
  valueFrom:
    secretKeyRef:
      name: notify-celery-main
      key: SECRET_KEY
- name: SENDGRID_API_KEY
  valueFrom:
    secretKeyRef:
      name: notify-celery-main
      key: SENDGRID_API_KEY
- name: SQLALCHEMY_DATABASE_URI
  valueFrom:
    secretKeyRef:
      name: notify-celery-main
      key: SQLALCHEMY_DATABASE_URI
- name: SQLALCHEMY_DATABASE_READER_URI
  valueFrom:
    secretKeyRef:
      name: notify-celery-main
      key: SQLALCHEMY_DATABASE_READER_URI
- name: NEW_RELIC_LICENSE_KEY
  valueFrom:
    secretKeyRef:
      name: notify-celery-main
      key: NEW_RELIC_LICENSE_KEY
- name: REDIS_URL
  valueFrom:
    secretKeyRef:
      name: notify-celery-main
      key: REDIS_URL
- name: REDIS_PUBLISH_URL
  valueFrom:
    secretKeyRef:
      name: notify-celery-main
      key: REDIS_PUBLISH_URL
{{- end -}}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ include "celery-main.fullname" . }}
  name:  celery
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: {{ include "celery-main.fullname" . }}
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.updateStrategy.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.updateStrategy.rollingUpdate.maxUnavailable }}
    type: {{ .Values.updateStrategy.type }}
  template:
    metadata:
      labels:
        app: {{ include "celery-main.fullname" . }}
    spec:
      priorityClassName: {{ include "celery-main.fullname" . }}
      initContainers:
      - name: wait-cwagent-ready
        env:
          - name: STATSD_HOST
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "sh /app/scripts/cwcheck.sh"]
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: NEW_RELIC_APP_NAME
              value: 'notification-celery-$(ENVIRONMENT)'
            - name: STATSD_HOST
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            {{- template "envVars" . }}
            {{- template "envSecrets" . }}
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/bash
                - -c
                - /app/scripts/run_celery_exit.sh
          command: ["/bin/sh"]
          args: ["-c", "sh /app/scripts/run_celery_core_tasks.sh"]
          resources:
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
      dnsPolicy: {{ .Values.dnsPolicy }}
      restartPolicy: {{ .Values.restartPolicy }}
      schedulerName: {{ .Values.schedulerName }}
      securityContext: {}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
status: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ include "celery-main.fullname" . }}-beat
  name: {{ include "celery-main.fullname" . }}-beat
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: {{ include "celery-main.fullname" . }}-beat
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.updateStrategy.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.updateStrategy.rollingUpdate.maxUnavailable }}
    type: {{ .Values.updateStrategy.type }}
  template:
    metadata:
      labels:
        app: {{ include "celery-main.fullname" . }}-beat
    spec:
      priorityClassName: high-priority
      initContainers:
        - name: init-postgres
          image: alpine
          command:
            [
              "sh",
              "-c",
              "until nslookup $(POSTGRES_HOST); do echo waiting for postgres; sleep 2; done;",
            ]
      containers:
        - image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          name: {{ include "celery-main.fullname" . }}-beat
          env:
            - name: NEW_RELIC_APP_NAME
              value: 'notification-celery-beat-$(ENVIRONMENT)'
            - name: STATSD_HOST
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            {{- template "envVars" . }}
            {{- template "envSecrets" . }}
          command: ["/bin/sh"]
          args: ["-c", "sh /app/scripts/run_celery_beat.sh"]
          resources: {}
      dnsPolicy: {{ .Values.dnsPolicy }}
      restartPolicy: {{ .Values.restartPolicy }}
      schedulerName: {{ .Values.schedulerName }}
      securityContext: {}          
      terminationGracePeriodSeconds: 30
status: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ include "celery-main.fullname" . }}-sms
    profile: fargate
  name: {{ include "celery-main.fullname" . }}-sms
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: {{ include "celery-main.fullname" . }}-sms
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.updateStrategy.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.updateStrategy.rollingUpdate.maxUnavailable }}
    type: {{ .Values.updateStrategy.type }}
  template:
    metadata:
      labels:
        app: {{ include "celery-main.fullname" . }}-sms
    spec:
      priorityClassName: high-priority
      initContainers:
        - name: init-postgres
          image: alpine
          command:
            [
              "sh",
              "-c",
              "until nslookup $(POSTGRES_HOST); do echo waiting for postgres; sleep 2; done;",
            ]
      containers:
        - image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          name: {{ include "celery-main.fullname" . }}-sms
          env:

            - name: NEW_RELIC_APP_NAME
              value: 'notification-celery-sms-$(ENVIRONMENT)'
            - name: STATSD_HOST
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            {{- template "envVars" . }}
            {{- template "envSecrets" . }}
          command: ["/bin/sh"]
          args: ["-c", "sh /app/scripts/run_celery_sms.sh"]
      dnsPolicy: {{ .Values.dnsPolicy }}
      restartPolicy: {{ .Values.restartPolicy }}
      schedulerName: {{ .Values.schedulerName }}
      securityContext: {}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
status: {}
