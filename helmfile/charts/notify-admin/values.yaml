# Default values for notify-admin.
env: "default"
awsAccountId: 123456789
awsRegion: "ca-central-1"
allowHtmlServiceIds: "1,2,3,4"
apiUrl: "https://api.notification.canada.ca"
adminBaseUrl: "https://notification.canada.ca"
baseDomain: "notification.canada.ca"
allowDebugRoute: "false"
assetUploadBucketName: "notification-canada-ca-default-asset-upload"
bulkSendAwsBucket: "notification-canada-ca-default-bulk-send"
csvUploadBucketName: "notification-canada-ca-default-csv"
ipGeolocateService:  "http://ipv4.notification-canada-ca.svc.cluster.local:8080"
bulkSendTestServiceId: "123456789"
contactEmail: "notification-ops@cds-snc.ca"
documentationDomain: "https://documentation.notification.canada.ca"
hcEnServiceId: "123456789"
hcFrServiceId: "123456789"
redisEnabled: "1"
sentryUrl: "changeme"
showStyleGuide: true
newRelicAppName: "notification-admin-default"
newRelicDistributedTracingEnabled: "false"
newRelicMonitorMode: "false"
ffSalesforceContact: "false"
awsXrayTracingEnabled: "false"
awsXrayContextMissing: "LOG_ERROR"
# Common values for notify-admin
crmOrgListUrl: "https://raw.githubusercontent.com/cds-snc/gc-organisations/main/data/all.json"
flaskApp: "application.py"
gcArticlesApi: "articles.alpha.canada.ca/notification-gc-notify"
newRelicConfigFile: "/app/newrelic.ini"


serviceAccount:
  create: true
  name: notify-admin

replicaCount: 2

image:
  repository: public.ecr.aws/cds-snc/notify-admin
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 25%
    maxUnavailable: 25%  

priorityClassName: high-priority

readinessProbe:
  httpGet:
    path: /_status?simple=true
    port: 6012

livenessProbe:
  httpGet:
    path: "/_status?simple=true"
    port: 6012

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  enabled: true
  type: LoadBalancer
  port: 6012
  annotations: 
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: 
  requests:
    cpu: "250m"
    memory: "700Mi"
  limits:
    cpu: "1200m"
    memory: "900Mi"

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 50

pdb:
  enabled: true
  minAvailable: 1

nodeSelector:  
  eks.amazonaws.com/capacityType: ON_DEMAND

targetGroupBinding:
  enabled: false
  targetGroupARN: ""

tolerations: []

affinity: {}

secretProviderClass:
  enabled: true
  provider: aws
  parameters:
    objects: |
      - objectName: INTERNAL_DNS_KEY_BASE64
        objectType: "secretsmanager"
      - objectName: INTERNAL_DNS_CERT_BASE64
        objectType: "secretsmanager"

  secretObjects:
    - data:
      - key: tls.key
        objectName: INTERNAL_DNS_KEY_BASE64
      - key: tls.crt
        objectName: INTERNAL_DNS_CERT_BASE64
      secretName: nginx
      type: kubernetes.io/tls