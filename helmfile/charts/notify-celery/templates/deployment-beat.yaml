{{- range $node := .Values.nodes }}
{{- with $ -}}
{{ if $node.deployment.deploymentBeatEnabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ include "celery.fullname" . }}-{{ $node.name }}
  name: {{ include "celery.fullname" . }}-{{ $node.name }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ $node.deployment.replicas }}
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: {{ include "celery.fullname" . }}-{{ $node.name }}
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.updateStrategy.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.updateStrategy.rollingUpdate.maxUnavailable }}
    type: {{ .Values.updateStrategy.type }}
  template:
    metadata:
      labels:
        app: {{ include "celery.fullname" . }}-{{ $node.name }}
    spec:
      nodeSelector:
        eks.amazonaws.com/capacityType: {{ $node.deployment.nodeSelector }}  
      serviceAccountName: {{ .Values.serviceAccount.serviceAccountName }}
      priorityClassName: {{ $node.deployment.priorityClassName }}
      initContainers:
        - name: init-postgres
          image: alpine
          command:
            [
              "sh",
              "-c",
              "until nslookup $(POSTGRES_HOST); do echo waiting for postgres; sleep 2; done;",
            ]
          env:  
            - name: POSTGRES_HOST
              valueFrom:
                secretKeyRef:
                  name: notify-celery
                  key: POSTGRES_HOST
      containers:
        - image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          name: {{ include "celery.fullname" . }}-{{ $node.name }}
          volumeMounts:
            - name: secrets-store-inline
              mountPath: "/mnt/secrets-store"
              readOnly: true  
          env:
            # Includes specific ENV Variables
            - name: NEW_RELIC_APP_NAME
              value: {{ $node.newRelicAppName }}
            - name: STATSD_HOST
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            # Includes common ENV Variables
            {{- range $key, $val := .Values.celeryCommon }}
            - name: {{ $key }}
              value: {{ $val | quote }}
            {{- end }}
            # Includes secret ENV Variables
            {{- range $key, $val := .Values.celerySecrets }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: notify-celery
                  key: {{ $key }}
            {{- end }}
          command: ["/bin/sh"]
          args: ["-c", "{{ $node.scriptArg }}"]
      {{ if .Values.secretProviderClass.enabled}}    
      volumes:
        - name: secrets-store-inline
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ include "celery.fullname" . }}
      {{ end }}   
      dnsPolicy: {{ .Values.dnsPolicy }}
      restartPolicy: {{ .Values.restartPolicy }}
      schedulerName: {{ .Values.schedulerName }}
      securityContext: {}
      terminationGracePeriodSeconds: {{ $node.deployment.terminationGracePeriodSeconds }}
status: {}
{{- end }}
{{- end }}
---
{{- end }}