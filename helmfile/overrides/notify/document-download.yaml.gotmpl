documentDownload:
  # ENVIRONMENT SPECIFIC VARIABLES
  AWS_REGION: "{{ requiredEnv "AWS_REGION" }}"
  AWS_XRAY_CONTEXT_MISSING: "{{ .StateValues.AWS_XRAY_CONTEXT_MISSING }}"  
  AWS_XRAY_SDK_ENABLED: "{{ .StateValues.AWS_XRAY_SDK_ENABLED }}"
  DEBUG: "{{ .StateValues.DEBUG }}"
  NEW_RELIC_APP_NAME: "notification-dd-api-{{ .Environment.Name }}"
  NEW_RELIC_DISTRIBUTED_TRACING_ENABLED: "{{ .StateValues.NEW_RELIC_DISTRIBUTED_TRACING_ENABLED }}"
  NEW_RELIC_MONITOR_MODE: "{{ .StateValues.NEW_RELIC_MONITOR_MODE }}"
  NEW_RELIC_IGNORE_STARTUP_ERRORS: "{{ .StateValues.NEW_RELIC_IGNORE_STARTUP_ERRORS }}"
  NEW_RELIC_ENVIRONMENT: "{{ .Environment.Name }}"
  NOTIFY_ENVIRONMENT: "{{ .Environment.Name }}"
  DOCUMENTS_BUCKET: "{{ .Release.Namespace }}-{{ .Environment.Name }}-document-download"
  BACKEND_HOSTNAME: "api.document.{{ requiredEnv "BASE_DOMAIN" }}"
  SCAN_FILES_DOCUMENTS_BUCKET: "{{ .Release.Namespace }}-{{ .Environment.Name }}-document-download-scan-files"
  EXTRA_MIME_TYPES: "{{ .StateValues.EXTRA_MIME_TYPES }}"
  # NON-ENVIRONMENT SPECIFIC VARIABLES
  AWS_XRAY_DAEMON_ADDRESS: "xray-daemon-aws-xray.xray.svc.cluster.local:2000"
  HTTP_SCHEME: "https"
  NEW_RELIC_CONFIG_FILE: "/app/newrelic.ini"

documentDownloadSecrets:
  SECRET_KEY: MANIFEST_SECRET_KEY
  NEW_RELIC_LICENSE_KEY: MANIFEST_NEW_RELIC_LICENSE_KEY
  NEW_RELIC_ACCOUNT_ID: MANIFEST_NEW_RELIC_ACCOUNT_ID
  NEW_RELIC_API_KEY: MANIFEST_NEW_RELIC_API_KEY
  AUTH_TOKENS: MANIFEST_DOCUMENT_DOWNLOAD_API_KEY

image: 
  tag: "{{ .StateValues.DOCUMENT_DOWNLOAD_DOCKER_TAG }}"

dockerhub:
  username: {{ requiredEnv "MANIFEST_DOCKER_HUB_USERNAME" }}
  pat: {{ requiredEnv "MANIFEST_DOCKER_HUB_PAT" }}

serviceAccount:
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::{{ requiredEnv "AWS_ACCOUNT_ID" }}:role/document-download-eks-role
    instrumentation.opentelemetry.io/inject-python: "true"

targetGroupBinding:
  enabled: true
  targetGroupARN: {{requiredEnv "DOCUMENT_DOWNLOAD_API_TARGET_GROUP_ARN"}}

resources:
  requests:
    cpu: {{ if eq .Environment.Name "production" }} "100m" {{ else if eq .Environment.Name "staging" }} "100m" {{ else }} "100m" {{ end }}
    memory: {{ if eq .Environment.Name "production" }} "400Mi" {{ else if eq .Environment.Name "staging" }} "400Mi" {{ else }} "400Mi" {{ end }}
  limits:
    cpu: {{ if eq .Environment.Name "production" }} "400m" {{ else if eq .Environment.Name "staging" }} "400m" {{ else }} "400m" {{ end }}
    memory: {{ if eq .Environment.Name "production" }} "800Mi" {{ else if eq .Environment.Name "staging" }} "800Mi" {{ else }} "800Mi" {{ end }}

autoscaling:
  enabled: {{ if eq .Environment.Name "production" }} true {{ else if eq .Environment.Name "staging" }} true {{ else }} true {{ end }}
  minReplicas: {{ if eq .Environment.Name "production" }} 2 {{ else if eq .Environment.Name "staging" }} 2 {{ else }} 2 {{ end }}
  maxReplicas: {{ if eq .Environment.Name "production" }} 4 {{ else if eq .Environment.Name "staging" }} 4 {{ else }} 4 {{ end }}
  targetCPUUtilizationPercentage: {{ if eq .Environment.Name "production" }} 35 {{ else if eq .Environment.Name "staging" }} 35 {{ else }} 35 {{ end }}

pdb:
  enabled: {{ if eq .Environment.Name "production" }} true {{ else if eq .Environment.Name "staging" }} true {{ else }} true {{ end }}
  minAvailable: {{ if eq .Environment.Name "production" }} 1 {{ else if eq .Environment.Name "staging" }} 1 {{ else }} 1 {{ end }}