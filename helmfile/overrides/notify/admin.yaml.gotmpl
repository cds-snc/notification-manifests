admin:
  # ENVIRONMENT SPECIFIC VARIABLES
  NOTIFY_ENVIRONMENT: "{{ .Environment.Name }}"
  AWS_REGION: "{{ requiredEnv "AWS_REGION" }}"
  ALLOW_HTML_SERVICE_IDS: "{{ .StateValues.ALLOW_HTML_SERVICE_IDS }}"
  ASSET_UPLOAD_BUCKET_NAME: "{{ .Release.Namespace }}-{{ .Environment.Name }}-asset-upload"
  ASSET_DOMAIN: "assets.{{ requiredEnv "BASE_DOMAIN" }}"
  BULK_SEND_AWS_BUCKET: "{{ .Release.Namespace }}-{{ .Environment.Name }}-bulk-send"
  CSV_UPLOAD_BUCKET_NAME: "{{ .Release.Namespace }}-{{ .Environment.Name }}-csv-upload"
  REPORTS_BUCKET_NAME: "{{ .Release.Namespace }}-{{ .Environment.Name }}-reports"
  IP_GEOLOCATE_SERVICE: "http://ipv4-geolocate.{{ .Release.Namespace }}.svc.cluster.local:8080"
  API_HOST_NAME: "https://{{ .StateValues.API_HOST_NAME_PREFIX }}.{{ requiredEnv "BASE_DOMAIN" }}"
  ADMIN_BASE_URL: "{{ requiredEnv "BASE_DOMAIN" }}"
  ALLOW_DEBUG_ROUTE: "{{ .StateValues.ALLOW_DEBUG_ROUTE }}"
  BULK_SEND_TEST_SERVICE_ID: "{{ .StateValues.BULK_SEND_TEST_SERVICE_ID }}"
  CONTACT_EMAIL: "{{ .StateValues.CONTACT_EMAIL }}"
  DOCUMENTATION_DOMAIN: "documentation.{{ requiredEnv "BASE_DOMAIN" }}"
  HC_EN_SERVICE_ID: "{{ .StateValues.HC_EN_SERVICE_ID }}"
  HC_FR_SERVICE_ID: "{{ .StateValues.HC_FR_SERVICE_ID }}"
  REDIS_ENABLED: "{{ .StateValues.REDIS_ENABLED }}"
  SHOW_STYLE_GUIDE: "{{ .StateValues.SHOW_STYLEGUIDE }}"
  NEW_RELIC_APP_NAME: "notification-admin-{{ .Environment.Name }}"
  NEW_RELIC_DISTRIBUTED_TRACING_ENABLED: "{{ .StateValues.NEW_RELIC_DISTRIBUTED_TRACING_ENABLED }}"
  NEW_RELIC_MONITOR_MODE: "{{ .StateValues.NEW_RELIC_MONITOR_MODE }}"
  NEW_RELIC_IGNORE_STARTUP_ERRORS: "{{ .StateValues.NEW_RELIC_IGNORE_STARTUP_ERRORS }}"
  NEW_RELIC_ENVIRONMENT: "{{ .Environment.Name }}"
  FF_SALESFORCE_CONTACT: "{{ .StateValues.FF_SALESFORCE_CONTACT }}"
  AWS_XRAY_TRACING_ENABLED: "{{ .StateValues.AWS_XRAY_TRACING_ENABLED }}"
  AWS_XRAY_SDK_ENABLED: "{{ .StateValues.AWS_XRAY_SDK_ENABLED }}"
  AWS_XRAY_CONTEXT_MISSING: "{{ .StateValues.AWS_XRAY_CONTEXT_MISSING }}"
  FF_ANNUAL_LIMIT: "{{ .StateValues.FF_ANNUAL_LIMIT }}"
  GC_ORGANISATIONS_BUCKET_NAME: "{{ .StateValues.GC_ORGANISATIONS_BUCKET_NAME }}"
  SENDING_DOMAIN: "{{ requiredEnv "BASE_DOMAIN" }}"
  FF_CARETAKER: "{{ .StateValues.FF_CARETAKER }}"
  FRESH_DESK_ENABLED: "{{ .StateValues.FRESH_DESK_ENABLED }}"
  # NON-ENVIRONMENT SPECIFIC VARIABLES
  AWS_XRAY_DAEMON_ADDRESS: "xray-daemon-aws-xray.xray.svc.cluster.local:2000"
  NEW_RELIC_CONFIG_FILE: "/app/newrelic.ini"
  CRM_ORG_LIST_URL: "https://raw.githubusercontent.com/cds-snc/gc-organisations/main/data/all.json"
  FLASK_APP: "application.py"
  GC_ARTICLES_API: "articles.alpha.canada.ca/notification-gc-notify"
  FF_RTL: "true"
  HELM_TEST_ADMIN: "HELM-IS-RADICAL!-ADMIN"
  FF_AUTH_V2: "{{ .StateValues.FF_AUTH_V2 }}"

adminSecrets:
  ADMIN_CLIENT_SECRET: MANIFEST_ADMIN_CLIENT_SECRET
  CRM_GITHUB_PERSONAL_ACCESS_TOKEN: MANIFEST_CRM_GITHUB_PERSONAL_ACCESS_TOKEN
  DANGEROUS_SALT: MANIFEST_DANGEROUS_SALT
  SECRET_KEY: MANIFEST_SECRET_KEY
  SQLALCHEMY_DATABASE_URI: MANIFEST_SQLALCHEMY_DATABASE_URI
  DEBUG_KEY: MANIFEST_DEBUG_KEY
  REDIS_URL: MANIFEST_REDIS_URL
  CACHE_OPS_URL: MANIFEST_REDIS_PUBLISH_URL
  NEW_RELIC_LICENSE_KEY: MANIFEST_NEW_RELIC_LICENSE_KEY
  NEW_RELIC_ACCOUNT_ID: MANIFEST_NEW_RELIC_ACCOUNT_ID
  NEW_RELIC_API_KEY: MANIFEST_NEW_RELIC_API_KEY
  GC_ARTICLES_API_AUTH_USERNAME: MANIFEST_GC_ARTICLES_API_AUTH_USERNAME
  GC_ARTICLES_API_AUTH_PASSWORD: MANIFEST_GC_ARTICLES_API_AUTH_PASSWORD
  WAF_SECRET: MANIFEST_WAF_SECRET
  MIXPANEL_PROJECT_TOKEN: MANIFEST_MIXPANEL_PROJECT_TOKEN

image:
  tag: "{{ .StateValues.ADMIN_DOCKER_TAG }}"

dockerhub:
  username: {{ requiredEnv "MANIFEST_DOCKER_HUB_USERNAME" }}
  pat: {{ requiredEnv "MANIFEST_DOCKER_HUB_PAT" }}

serviceAccount:
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::{{ requiredEnv "AWS_ACCOUNT_ID" }}:role/admin-eks-role

targetGroupBinding:
  enabled: true
  targetGroupARN: {{requiredEnv "ADMIN_TARGET_GROUP_ARN"}}

resources:
  requests:
    cpu: {{ if eq .Environment.Name "production" }} "250m" {{ else if eq .Environment.Name "staging" }} "250m" {{ else }} "250m" {{ end }}
    memory: {{ if eq .Environment.Name "production" }} "700Mi" {{ else if eq .Environment.Name "staging" }} "700Mi" {{ else }} "700Mi" {{ end }}
  limits:
    cpu: {{ if eq .Environment.Name "production" }} "1200m" {{ else if eq .Environment.Name "staging" }} "1200m" {{ else }} "1200m" {{ end }}
    memory: {{ if eq .Environment.Name "production" }} "900Mi" {{ else if eq .Environment.Name "staging" }} "900Mi" {{ else }} "900Mi" {{ end }}

autoscaling:
  enabled: {{ if eq .Environment.Name "production" }} true {{ else if eq .Environment.Name "staging" }} true {{ else }} true {{ end }}
  minReplicas: {{ if eq .Environment.Name "production" }} 2 {{ else if eq .Environment.Name "staging" }} 2 {{ else }} 2 {{ end }}
  maxReplicas: {{ if eq .Environment.Name "production" }} 3 {{ else if eq .Environment.Name "staging" }} 3 {{ else }} 3 {{ end }}
  targetCPUUtilizationPercentage: {{ if eq .Environment.Name "production" }} 50 {{ else if eq .Environment.Name "staging" }} 50 {{ else }} 50 {{ end }}

pdb:
  enabled: {{ if eq .Environment.Name "production" }} true {{ else if eq .Environment.Name "staging" }} true {{ else }} true {{ end }}
  minAvailable: {{ if eq .Environment.Name "production" }} 1 {{ else if eq .Environment.Name "staging" }} 1 {{ else }} 1 {{ end }}
