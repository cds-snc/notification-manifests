env:
  - name: AWS_REGION
    value: {{ requiredEnv "AWS_REGION" }}
  - name: CLUSTER_NAME
    value:  notification-canada-ca-{{ .Environment.Name }}-eks-cluster
  - name: HTTP_SERVER
    value: "On"
  - name: HTTP_PORT
    value: "2020"
  - name: READ_FROM_HEAD
    value: "Off"
  - name: READ_FROM_TAIL
    value: "On"
  - name: HOST_NAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
  - name: HOSTNAME
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: metadata.name
  - name: CI_VERSION
    value: "k8s/1.3.15"

image:
  repository: public.ecr.aws/aws-observability/aws-for-fluent-bit
  tag: 2.32.2.20240516
  pullPolicy: IfNotPresent

rbac:
  create: true
  nodeAccess: true
  eventsAccess: true

service:
  ## Allow the service to be exposed for monitoring
  ## For liveness check to work, Health_Check must be set to On
  ## https://docs.fluentbit.io/manual/administration/monitoring
  extraService: |
    Flush                     5
    Grace                     30
    Log_Level                 info
    Daemon                    off
    Parsers_File              /fluent-bit/etc/conf/parsers.conf
    HTTP_Server               ${HTTP_SERVER}
    HTTP_Listen               0.0.0.0
    HTTP_Port                 ${HTTP_PORT}
    storage.path              /var/fluent-bit/state/flb-storage/
    storage.sync              normal
    storage.checksum          off
    storage.backlog.mem_limit 5M

  parsersFiles:
    - /fluent-bit/parsers/parsers.conf
    extraParsers: |
      [PARSER]
        Name                syslog
        Format              regex
        Regex               ^(?<time>[^ ]* {1,2}[^ ]* [^ ]*) (?<host>[^ ]*) (?<ident>[a-zA-Z0-9_\/\.\-]*)(?:\[(?<pid>[0-9]+)\])?(?:[^\:]*\:)? *(?<message>.*)$
        Time_Key            time
        Time_Format         %b %d %H:%M:%S

      [PARSER]
        Name                container_firstline
        Format              regex
        Regex               (?<log>(?<="log":")\S(?!\.).*?)(?<!\\)".*(?<stream>(?<="stream":").*?)".*(?<time>\d{4}-\d{1,2}-\d{1,2}T\d{2}:\d{2}:\d{2}\.\w*).*(?=})
        Time_Key            time
        Time_Format         %Y-%m-%dT%H:%M:%S.%LZ

      [PARSER]
        Name                cwagent_firstline
        Format              regex
        Regex               (?<log>(?<="log":")\d{4}[\/-]\d{1,2}[\/-]\d{1,2}[ T]\d{2}:\d{2}:\d{2}(?!\.).*?)(?<!\\)".*(?<stream>(?<="stream":").*?)".*(?<time>\d{4}-\d{1,2}-\d{1,2}T\d{2}:\d{2}:\d{2}\.\w*).*(?=})
        Time_Key            time
        Time_Format         %Y-%m-%dT%H:%M:%S.%LZ

      [MULTILINE_PARSER]
        name          multiline-notify-python
        type          regex
        flush_timeout 1000
        # rules |   state name  | regex pattern         | next state
        # ------|---------------|-----------------------------------
        rule      "start_state"   "/^\[.*\].*/"                "cont"
        rule      "cont"          "/^[^\[].*/"           "cont"

input:
  name: "tail"
  enabled: true
  tag: "application.*"
  excludePath: "/var/log/containers/cloudwatch-agent*, /var/log/containers/fluent-bit*, /var/log/containers/aws-node*, /var/log/containers/kube-proxy*, /var/log/containers/celery*"
  path: "/var/log/containers/*.log"
  db: "/var/fluent-bit/state/flb_container.db"
  multilineParser: "docker, cri"
  memBufLimit: 5MB
  skipLongLines: "On"
  refreshInterval: 10
  rotateWait: 30
  storageType: "filesystem"
  readFromHead: "${READ_FROM_HEAD}"

  extraInputs: |
    [INPUT]
      Name                tail
      Tag                 application.*
      Path                /var/log/containers/fluent-bit*
      multiline.parser    docker, cri
      DB                  /var/fluent-bit/state/flb_log.db
      Mem_Buf_Limit       5MB
      Skip_Long_Lines     On
      Refresh_Interval    10
      Read_from_Head      ${READ_FROM_HEAD}

    [INPUT]
      Name                tail
      Tag                 application.*
      Path                /var/log/containers/cloudwatch-agent*
      multiline.parser    docker, cri
      DB                  /var/fluent-bit/state/flb_cwagent.db
      Mem_Buf_Limit       5MB
      Skip_Long_Lines     On
      Refresh_Interval    10
      Read_from_Head      ${READ_FROM_HEAD}

    [INPUT]
      Name                tail
      Tag                 application.*
      Exclude_Path        /var/log/containers/cloudwatch-agent*, /var/log/containers/fluent-bit*, /var/log/containers/aws-node*, /var/log/containers/kube-proxy*, /var/log/containers/celery*
      Path                /var/log/containers/*.log
      multiline.parser    docker, cri
      DB                  /var/fluent-bit/state/flb_container.db
      Mem_Buf_Limit       50MB
      Skip_Long_Lines     Off
      Refresh_Interval    10
      Rotate_Wait         30
      storage.type        filesystem
      Read_from_Head      ${READ_FROM_HEAD}

    [INPUT]
      Name                tail
      Tag                 application.*
      Path                /var/log/containers/fluent-bit*
      multiline.parser    docker, cri
      DB                  /var/fluent-bit/state/flb_log.db
      Mem_Buf_Limit       5MB
      Skip_Long_Lines     On
      Refresh_Interval    10
      Read_from_Head      ${READ_FROM_HEAD}

    [INPUT]
      Name                tail
      Tag                 application.*
      Path                /var/log/containers/cloudwatch-agent*
      multiline.parser    docker, cri
      DB                  /var/fluent-bit/state/flb_cwagent.db
      Mem_Buf_Limit       5MB
      Skip_Long_Lines     On
      Refresh_Interval    10
      Read_from_Head      ${READ_FROM_HEAD}

    [INPUT]
      Name                tail
      Tag                 celery.*
      Path                /var/log/containers/celery*
      multiline.parser    docker, cri
      DB                  /var/fluent-bit/state/celery.db
      Mem_Buf_Limit       150MB
      Skip_Long_Lines     Off
      Refresh_Interval    10
      Rotate_Wait         30
      storage.type        filesystem
      Read_from_Head      ${READ_FROM_HEAD}

    [INPUT]
      Name                systemd
      Tag                 dataplane.systemd.*
      Systemd_Filter      _SYSTEMD_UNIT=docker.service
      Systemd_Filter      _SYSTEMD_UNIT=containerd.service
      Systemd_Filter      _SYSTEMD_UNIT=kubelet.service
      DB                  /var/fluent-bit/state/systemd.db
      Path                /var/log/journal
      Read_From_Tail      ${READ_FROM_TAIL}

    [INPUT]
      Name                tail
      Tag                 dataplane.tail.*
      Path                /var/log/containers/aws-node*, /var/log/containers/kube-proxy*
      multiline.parser    docker, cri
      DB                  /var/fluent-bit/state/flb_dataplane_tail.db
      Mem_Buf_Limit       50MB
      Skip_Long_Lines     On
      Refresh_Interval    10
      Rotate_Wait         30
      storage.type        filesystem
      Read_from_Head      ${READ_FROM_HEAD}

    [INPUT]
      Name                tail
      Tag                 host.dmesg
      Path                /var/log/dmesg
      Key                 message
      DB                  /var/fluent-bit/state/flb_dmesg.db
      Mem_Buf_Limit       5MB
      Skip_Long_Lines     On
      Refresh_Interval    10
      Read_from_Head      ${READ_FROM_HEAD}

    [INPUT]
      Name                tail
      Tag                 host.messages
      Path                /var/log/messages
      Parser              syslog
      DB                  /var/fluent-bit/state/flb_messages.db
      Mem_Buf_Limit       5MB
      Skip_Long_Lines     On
      Refresh_Interval    10
      Read_from_Head      ${READ_FROM_HEAD}

    [INPUT]
      Name                tail
      Tag                 host.secure
      Path                /var/log/secure
      Parser              syslog
      DB                  /var/fluent-bit/state/flb_secure.db
      Mem_Buf_Limit       5MB
      Skip_Long_Lines     On
      Refresh_Interval    10
      Read_from_Head      ${READ_FROM_HEAD}



filter:
  enabled: true
  match: "application.*"
  kubeURL: "https://kubernetes.default.svc:443"
  mergeLog: "On"
  mergeLogKey: "log_processed"
  keepLog: "On"
  k8sLoggingParser: "On"
  k8sLoggingExclude: "Off"
  bufferSize: "0"
  kubeletPort: "10250"
  useKubelet: "On"
  annotations: "On"
  labels: "On"

  additionalFilters: |
    [FILTER]
      Name                  kubernetes
      Match                 celery.*
      Kube_URL              https://kubernetes.default.svc:443
      Kube_Tag_Prefix       celery.var.log.containers.
      Merge_Log             On
      Merge_Log_Key         log_processed
      K8S-Logging.Parser    On
      K8S-Logging.Exclude   Off
      Labels                On
      Annotations           On
      Use_Kubelet           On
      Kubelet_Port          10250
      Buffer_Size           0

    [FILTER]
      name                  multiline
      match                 celery.*
      multiline.key_content log
      multiline.parser      multiline-notify-python
      emitter_mem_buf_limit 150MB

    [FILTER]
      Name                modify
      Match               dataplane.systemd.*
      Rename              _HOSTNAME                   hostname
      Rename              _SYSTEMD_UNIT               systemd_unit
      Rename              MESSAGE                     message
      Remove_regex        ^((?!hostname|systemd_unit|message).)*$

    [FILTER]
      Name                aws
      Match               dataplane.*
      imds_version        v2

    [FILTER]
      Name                aws
      Match               host.*
      imds_version        v2


cloudWatchLogs:
  enabled: true
  match: "application.*"
  region: ${AWS_REGION}
  logGroupName: "/aws/containerinsights/${CLUSTER_NAME}/application"
  logStreamName: $tag[4]
  logKey:
  logFormat:
  logRetentionDays:
  roleArn:
  autoCreateGroup: true
  endpoint:
  extraUserAgent: "container-insights"
  credentialsEndpoint: {}
  extraOutputs: |
    [OUTPUT]
      Name                cloudwatch_logs
      Match               celery.*
      region              ${AWS_REGION}
      log_group_name      /aws/containerinsights/${CLUSTER_NAME}/application
      log_stream_name     $tag[4]
      auto_create_group   true
      extra_user_agent    container-insights

    [OUTPUT]
      Name                cloudwatch_logs
      Match               dataplane.*
      region              ${AWS_REGION}
      log_group_name      /aws/containerinsights/${CLUSTER_NAME}/dataplane
      log_stream_prefix   ${HOST_NAME}-
      auto_create_group   true
      extra_user_agent    container-insights

    [OUTPUT]
      Name                        cloudwatch_logs
      Match                       host.*
      region                      ${AWS_REGION}
      log_group_name              /aws/containerinsights/${CLUSTER_NAME}/host
      log_stream_prefix           ${HOST_NAME}.
      auto_create_group           true
      extra_user_agent            container-insights

serviceAccount:
  create: true
  annotations: {}
  name:

resources:
  limits:
    memory: 500Mi
  requests:
    cpu: 100m
    memory: 100Mi

terminationGracePeriodSeconds: 10

## Assign a PriorityClassName to pods if set
priorityClassName: system-cluster-critical

updateStrategy:
  type: RollingUpdate

nodeSelector: {}

tolerations:
  - key: "node-role.kubernetes.io/master"
    operator: "Exists"
    effect: "NoSchedule"
  - key: "node.kubernetes.io/unreachable"
    operator: "Exists"
    effect: "NoExecute"
    tolerationSeconds: 300
  - key: "node.kubernetes.io/not-ready"
    operator: "Exists"
    effect: "NoExecute"
    tolerationSeconds: 300

hostNetwork: true
dnsPolicy: ClusterFirstWithHostNet

volumeMounts:
  - name: config
    mountPath: /fluent-bit/etc/conf
  # Please don't change below read-only permissions
  - name: fluentbitstate
    mountPath: /var/fluent-bit/state
  - name: varlog
    mountPath: /var/log
    readOnly: true
  - name: varlibdockercontainers
    mountPath: /var/lib/docker/containers
    readOnly: true
  - name: fluent-bit-config
    mountPath: /fluent-bit/etc/
  - name: runlogjournal
    mountPath: /run/log/journal
    readOnly: true
  - name: dmesg
    mountPath: /var/log/dmesg
    readOnly: true

# For livenessProbe to work - service.extraService must also enable Health_Check On
livenessProbe:
  httpGet:
    path: /api/v1/health
    port: 2020
    scheme: HTTP
  failureThreshold: 2
  initialDelaySeconds: 30
  timeoutSeconds: 10

readinessProbe: {}
  # httpGet:
  #   path: /api/v1/health
  #   port: 2020
  #   scheme: HTTP
  # failureThreshold: 2
  # initialDelaySeconds: 30
  # timeoutSeconds: 10

serviceMonitor:
  service: 
    type: ClusterIP
    port: 2020
    targetPort: 2020
    extraPorts: []
      # - port: 2021
      #   targetPort: 2021
      #   protocol: TCP
      #   name: metrics
  ## When set true then use a ServiceMonitor to configure scraping
  enabled: false
  interval: 30s
  telemetryPath: /api/v1/metrics/prometheus
  labels:
    # app: example-application
    # teamname: example
  timeout: 10s
  relabelings: []
  targetLabels: []
  metricRelabelings: []
  extraEndpoints: []
    # - port: metrics
    #   path: /metrics
    #   interval: 30s
    #   scrapeTimeout: 10s
    #   scheme: http

initContainers:
  - name: wait-for-init
    image: busybox:1.28
    command: ['sh', '-c', 'echo "Waiting for 10 seconds for node to sort itself out" && sleep 10']