name: "Update SecretsManager (Staging)"

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - "env/staging/**.aws"

defaults:
  run:
    shell: bash

jobs:
  sync-secrets:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Decrypt staging env
        run: |
          make decrypt-staging

      - name: Update secret manager
        working-directory: env/staging
        run: |
          sed '/^$/d' .env | jq -nR --raw-output '[ inputs | gsub("\r$"; "") | split("="; "") | {(.[0]): .[1]}] | add' > env.json
          aws secretsmanager update-secret --secret-id environment_variables --secret-string file://env.json

      # Generate a bot token that will be used to dispatch the terraform apply
      # This is required as the default repo GITHUB_TOKEN does not have access to other repositories.
      - name: Obtain a Notify PR Bot GitHub App Installation Access Token
        run: |
          TOKEN="$(npx obtain-github-app-installation-access-token@1.1.0 ci ${{ secrets.GH_APP_CREDENTIALS_TOKEN }})"
          echo "::add-mask::$TOKEN"
          echo "GITHUB_TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Dispatch Terraform apply
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'cds-snc',
              repo: 'notification-terraform',
              workflow_id: 'merge_to_main_staging.yml',
              ref: 'main'
            })