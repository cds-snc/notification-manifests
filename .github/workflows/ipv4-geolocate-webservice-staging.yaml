name: Staging - IPv4 Geolocate Webservice Kubernetes Rollout
on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'The release tag from the source docker build job'
        required: true
  repository_dispatch:
    types: [webhook]
    inputs:
      release_tag:
        description: 'The release tag from the source docker build job'
        required: true

env:
  DOCKER_SLUG: public.ecr.aws/v6b8u5o6/notify-ipv4-geolocate-webservice
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  HELMFILE_FILE_PATH: ${{ github.workspace }}/helmfile
  STAGING_AWS_ACCOUNT: ${{ secrets.STAGING_AWS_ACCOUNT }}
  OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

jobs:
  rollout:
    runs-on: ubuntu-latest
    name: Rollout on EKS
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@5fd3084fc36e372ff1fff382a39b10d03659f355 # v2.2.0
        id: awsconfig
        with:
          aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
        with:
          # Fetches entire history, so we can analyze commits since last tag
          fetch-depth: 0

        # I'm cheating and using this action to install kubectl
      - name: Setup helmfile
        uses: mamezou-tech/setup-helmfile@v2.0.0
        with:
          install-kubectl: yes
          install-helm: yes

      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved

      - name: Install 1Pass CLI
        run: |
          curl -o 1pass.deb https://downloads.1password.com/linux/debian/amd64/stable/1password-cli-amd64-latest.deb
          sudo dpkg -i 1pass.deb

      - name: One Password Fetch
        run: |
          op read op://4eyyuwddp6w4vxlabrr2i2duxm/"Staging Github Actions VPN"/notesPlain > /var/tmp/staging.ovpn

      - name: Connect to VPN
        uses: "kota65535/github-openvpn-connect-action@cd2ed8a90cc7b060dc4e001143e811b5f7ea0af5"
        with:
          config_file: /var/tmp/staging.ovpn
          client_key: ${{ secrets.STAGING_OVPN_CLIENT_KEY }}
          echo_config: false       

      - name: Configure kubeconfig
        run: |
          aws eks update-kubeconfig --name notification-canada-ca-staging-eks-cluster   

      - name: Update images in staging
        run: |
          IPV4_RELEASE_TAG=${{ github.event.inputs.release_tag }}
          echo $IPV4_RELEASE_TAG
          kubectl set image deployment.apps/ipv4 ipv4=$DOCKER_SLUG:$IPV4_RELEASE_TAG -n=notification-canada-ca --kubeconfig=$HOME/.kube/config

      - name: Restart deployments in staging
        run: |
          kubectl rollout restart deployment/ipv4 -n notification-canada-ca

      - name: Notify Slack channel if this job failed
        if: ${{ failure() }}
        run: |
          json="{'text':'<!here> Staging - IPv4 Rollout is failing in <https://github.com/cds-snc/notification-manifests/actions/runs/${GITHUB_RUN_ID}|notification-manifests> !'}"
          curl -X POST -H 'Content-type: application/json' --data "$json"  ${{ secrets.SLACK_WEBHOOK }}
