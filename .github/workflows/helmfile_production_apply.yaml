name: Production - Helmfile Apply

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "VERSION"

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  HELMFILE_FILE_PATH: ${{ github.workspace }}/helmfile
  PRODUCTION_AWS_ACCOUNT: ${{ secrets.PRODUCTION_AWS_ACCOUNT_ID }}
  OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN_PRODUCTION }}
  PRIVATE_ECR: ${{ secrets.PRODUCTION_AWS_ACCOUNT_ID }}.dkr.ecr.ca-central-1.amazonaws.com/notify
  API_LAMBDA_IMAGE: api-lambda:7568e12
  HEARTBEAT_IMAGE: heartbeat:b66e0f5
  SYSTEM_STATUS_IMAGE: system_status:b66e0f5
  SES_TO_SQS_EMAIL_CALLBACKS_IMAGE: ses_to_sqs_email_callbacks:b66e0f5

jobs:
  helmfile-apply:
    runs-on: ubuntu-latest
    steps:

      - name: Inject token authentication
        run: |
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@5fd3084fc36e372ff1fff382a39b10d03659f355 # v2.2.0
        id: awsconfig
        with:
          aws-access-key-id: ${{ secrets.PRODUCTION_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PRODUCTION_AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
        with:
          # Fetches entire history, so we can analyze commits since last tag
          fetch-depth: 0

      - name: Setup helmfile
        uses: mamezou-tech/setup-helmfile@03233e1cd9b19b2ba320e431f7bcc0618db4248d # v2.0.0
        with:
          install-kubectl: yes
          install-helm: yes       
          helmfile-version: "v0.151.0"
          helm-s3-plugin-version: "v0.16.2"

      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved

      - name: Setup Terraform tools
        uses: cds-snc/terraform-tools-setup@v1
        env: # In case you want to override default versions
          CONFTEST_VERSION: 0.30.0 
          TERRAFORM_VERSION: 1.9.5
          TERRAGRUNT_VERSION: 0.66.9
          TF_SUMMARIZE_VERSION: 0.2.3                           

      - name: Install 1Pass CLI
        run: |
          curl -o 1pass.deb https://downloads.1password.com/linux/debian/amd64/stable/1password-cli-amd64-latest.deb
          sudo dpkg -i 1pass.deb 

      - name: Retrieve VPN Config
        run: |
          scripts/createVPNConfig.sh production 2> /dev/null   

      - name: Connect to VPN
        uses: "kota65535/github-openvpn-connect-action@cd2ed8a90cc7b060dc4e001143e811b5f7ea0af5" # v3.1.0
        with:
          config_file: /var/tmp/production.ovpn
          echo_config: false            

      - name: Configure kubeconfig
        run: |
          aws eks update-kubeconfig --name notification-canada-ca-production-eks-cluster --alias production

      - name: Load Context Variables
        run: |
            ./helmfile/getContext.sh -g

      - name: Run Database Upgrade Helmfile Sync
        uses: ./.github/actions/db-migration
        with:
          environment: "production"
          namespace: "notification-canada-ca"
          app_label: "notify-database"
          timeout: "400s"

      - name: Helmfile apply
        if: ${{ success() }}
        id: helmfile_apply
        run: |
          pushd helmfile
          helmfile --environment production -l 'tier=crd' apply
          helmfile --environment production -l 'app!=notify-database,tier!=crd' apply
          popd

      - name: Save ENV vars and secrets to AWS Param Store
        if: ${{ success() }}
        run: |
          # wait for the secrets and env vars to be available
          sleep 20
          source ./scripts/lambdaParamStoreUpdatesProduction.sh -g
          echo DIFF=$DIFF
          echo "ENV_DIFF=$DIFF" >> $GITHUB_ENV
  
      - name: Force api-lambda to redeploy on environment changes
        if: ${{ success() }}
        uses: ./.github/actions/update-lambda-function
        with:
          alias-name: latest
          function-name: api-lambda
          image-uri: $PRIVATE_ECR/$API_LAMBDA_IMAGE

      - name: Force heartbeat lambda to redeploy on environment changes
        if: ${{ success() }}
        uses: ./.github/actions/update-lambda-function
        with:
          alias-name: latest
          function-name: heartbeat
          image-uri: $PRIVATE_ECR/$HEARTBEAT_IMAGE

      - name: Force system_status to redeploy on environment changes
        if: ${{ success() }}
        uses: ./.github/actions/update-lambda-function
        with:
          alias-name: latest
          function-name: system_status
          image-uri: $PRIVATE_ECR/$SYSTEM_STATUS_IMAGE

      - name: Force ses_to_sqs_email_callbacks to redeploy on environment changes
        if: ${{ success() }}
        uses: ./.github/actions/update-lambda-function
        with:
          alias-name: latest
          function-name: ses_to_sqs_email_callbacks
          image-uri: $PRIVATE_ECR/$SES_TO_SQS_EMAIL_CALLBACKS_IMAGE

      - name: Notify Slack channel if this job failed
        if: ${{ failure() }}
        run: |
          json='{"text":"<!here> Production Helmfile Apply is Failing <https://github.com/cds-snc/notification-manifests/|notification-manifests> !"}'
          curl -X POST -H 'Content-type: application/json' --data "$json"  ${{ secrets.SLACK_WEBHOOK }}


  clear-cache:
    needs: helmfile-apply
    uses: ./.github/workflows/clear-notify-cache.yaml
    with:
      environment: production
      cache_clear_user_name: CACHE_CLEAR_USER
      api_url: https://api.notification.canada.ca
    secrets:
      CACHE_CLEAR_CLIENT_SECRET: ${{ secrets.PRODUCTION_CACHE_CLEAR_CLIENT_SECRET }}
        

  publish-deployment:
    runs-on: ubuntu-latest
    needs: helmfile-apply

    steps:
      
      - name: Add deployment to New Relic
        run: |
          for application_id in 283469061 283468826 283468685; do
            curl -X POST "https://api.newrelic.com/v2/applications/$application_id/deployments.json" \
              -H "X-Api-Key:$NEW_RELIC_API_KEY" -i \
              -H 'Content-Type: application/json' \
              -d \
            '{
              "deployment": {
                "revision": "'$GITHUB_SHA'"
              }
            }'
          done
        env:
          NEW_RELIC_API_KEY: ${{ secrets.PRODUCTION_NEW_RELIC_API_KEY }}

      - name: Report deployment to Sentinel
        uses: cds-snc/sentinel-forward-data-action@main
        with:
          input_data: '{"product": "notify", "sha": "${{ github.sha }}", "version": "${{ env.TARGET_VERSION }}", "repository": "${{ github.repository }}", "environment": "production"}'
          log_type: CDS_Product_Deployment_Data
          log_analytics_workspace_id: ${{ secrets.LOG_ANALYTICS_WORKSPACE_ID }}
          log_analytics_workspace_key: ${{ secrets.LOG_ANALYTICS_WORKSPACE_KEY }}


      - name: Notify Slack channel if this job failed
        if: ${{ failure() }}
        run: |
          json='{"text":"<!here> CI is failing in <https://github.com/cds-snc/notification-manifests/|notification-manifests> !"}'
          curl -X POST -H 'Content-type: application/json' --data "$json"  ${{ secrets.SLACK_WEBHOOK }}